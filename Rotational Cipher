# =============================================================================
# Rotational Cipher
# One simple way to encrypt a string is to "rotate" every alphanumeric character by a certain amount.
# Rotating a character means replacing it with another character that is a certain number of steps away in normal alphabetic or numerical order.

# For example, if the string "Zebra-493?" is rotated 3 places, the resulting string is "Cheud-726?".
# Every alphabetic character is replaced with the character 3 letters higher (wrapping around from Z to A), and every numeric character replaced with the character 3 digits higher (wrapping around from 9 to 0).
# Note that the non-alphanumeric characters remain unchanged.

# Given a string and a rotation factor the rotationalCipher function below returns an encrypted string.

# Example 1
# input = Zebra-493?
# rotationFactor = 3
# output = Cheud-726?

# Example 2
# input = abcdefghijklmNOPQRSTUVWXYZ0123456789
# rotationFactor = 39
# output = nopqrstuvwxyzABCDEFGHIJKLM9012345678
# =============================================================================

def rotationalCipher(input, rotation_factor):
  listOfChar = []
  for x in input:
    if x.isalpha():
      if x.isupper():
        x = chr((ord(x.upper()) + rotation_factor - 65) % 26 + 65)
        listOfChar.append(x)
      elif x.islower():
        x = chr((ord(x.lower()) + rotation_factor - 97) % 26 + 97)
        listOfChar.append(x)        
    elif x.isdigit():
      x = int(x)
      if x + rotation_factor > 9:
        x = str(int (x) + rotation_factor) [-1]
        listOfChar.append(x)
      else:
        x += int(rotation_factor)
        x = str(x)
        listOfChar.append(x)
    else:
      listOfChar.append(x)
  listOfChar = ''.join(listOfChar)
  return listOfChar

# These are the tests we use to determine if the solution is correct.
# You can add your own at the bottom.

def printString(string):
  print('[\"', string, '\"]', sep='', end='')

test_case_number = 1

def check(expected, output):
  global test_case_number
  result = False
  if expected == output:
    result = True
  rightTick = '\u2713'
  wrongTick = '\u2717'
  if result:
    print(rightTick, 'Test #', test_case_number, sep='')
  else:
    print(wrongTick, 'Test #', test_case_number, ': Expected ', sep='', end='')
    printString(expected)
    print(' Your output: ', end='')
    printString(output)
    print()
  test_case_number += 1

if __name__ == "__main__":
  input_1 = "All-convoYs-9-be:Alert1."
  rotation_factor_1 = 4
  expected_1 = "Epp-gsrzsCw-3-fi:Epivx5."
  output_1 = rotationalCipher(input_1, rotation_factor_1)
  check(expected_1, output_1)

  input_2 = "abcdZXYzxy-999.@"
  rotation_factor_2 = 200
  expected_2 = "stuvRPQrpq-999.@"
  output_2 = rotationalCipher(input_2, rotation_factor_2)
  check(expected_2, output_2)

  # Add your own test cases here
  


